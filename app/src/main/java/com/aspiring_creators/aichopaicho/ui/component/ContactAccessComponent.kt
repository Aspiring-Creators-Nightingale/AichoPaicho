package com.aspiring_creators.aichopaicho.ui.component

import android.Manifest
import android.annotation.SuppressLint
import android.content.ContentResolver
import android.content.Intent
import android.content.pm.PackageManager
import android.net.Uri
import android.provider.ContactsContract
import android.provider.Settings
import androidx.activity.compose.rememberLauncherForActivityResult
import androidx.activity.result.contract.ActivityResultContracts
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.PaddingValues
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.AccountBox
import androidx.compose.material.icons.filled.Clear
import androidx.compose.material.icons.filled.Person
import androidx.compose.material.icons.filled.Phone
import androidx.compose.material.icons.filled.Refresh
import androidx.compose.material.icons.filled.Search
import androidx.compose.material.icons.filled.Settings
import androidx.compose.material3.AlertDialog
import androidx.compose.material3.Button
import androidx.compose.material3.Card
import androidx.compose.material3.CardColors
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.CardElevation
import androidx.compose.material3.CircularProgressIndicator
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.OutlinedButton
import androidx.compose.material3.OutlinedTextField
import androidx.compose.material3.Text
import androidx.compose.material3.TextButton
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.AnnotatedString
import androidx.compose.ui.text.SpanStyle
import androidx.compose.ui.text.buildAnnotatedString
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.text.withStyle
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.core.content.ContextCompat
import com.aspiring_creators.aichopaicho.data.entity.Contact
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.delay
import kotlinx.coroutines.withContext
import kotlin.time.Duration


@Composable
fun ContactPickerField(
    label: String,
    onContactSelected: (Contact) -> Unit, // Now returns Contact object
    modifier: Modifier = Modifier,
    placeholder: String = "Click logo to select from contacts"
) {
    var showContactPicker by remember { mutableStateOf(false) }
    var currentValue by remember { mutableStateOf("") }

    Column(modifier = modifier) {
        OutlinedTextField(
            value = currentValue,
            onValueChange = { newValue ->
             /*   currentValue = newValue
                // Create a Contact object for manual entry
                val manualContact = Contact(
                    id = "", // Will be generated by your app
                    name = newValue,
                    phone = emptyList(),
                    contactId = null, // No system contact ID for manual entry
                )
                onContactSelected(manualContact)
            */},
            label = { Text(label) },
            placeholder = { Text(placeholder) },
            modifier = Modifier.fillMaxWidth(),
            singleLine = true,
            trailingIcon = {
                Row {
                    // Contact picker button
                    IconButton(
                        onClick = { showContactPicker = true }
                    ) {
                        Icon(
                            imageVector = Icons.Filled.AccountBox,
                            contentDescription = "Select from contacts",
                            tint = MaterialTheme.colorScheme.primary
                        )
                    }

                    // Clear button (if there's text)
                    if (currentValue.isNotEmpty()) {
                        IconButton(
                            onClick = {
                                currentValue = ""
                                // Send empty contact when cleared
                                val emptyContact = Contact(
                                    id = "",
                                    name = "",
                                    phone = emptyList(),
                                    contactId = null,
                                    isDeleted = false,
                                    createdAt = System.currentTimeMillis(),
                                    updatedAt = System.currentTimeMillis()
                                )
                                onContactSelected(emptyContact)
                            }
                        ) {
                            Icon(
                                imageVector = Icons.Filled.Clear,
                                contentDescription = "Clear",
                                tint = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.6f)
                            )
                        }
                    }
                }
            }
        )

        // Contact picker dialog
        if (showContactPicker) {
            ContactPickerDialog(
                onContactSelected = { contact ->
                    currentValue = contact.name
                    onContactSelected(contact) // Pass the full Contact object
                    showContactPicker = false
                },
                onDismiss = {
                    showContactPicker = false
                }
            )
        }
    }
}

@Composable
fun ContactPickerDialog(
    onContactSelected: (Contact) -> Unit,
    onDismiss: () -> Unit,
    modifier: Modifier = Modifier
) {
    var contacts by remember { mutableStateOf<List<Contact>>(emptyList()) }
    var filteredContacts by remember { mutableStateOf<List<Contact>>(emptyList()) }
    var searchQuery by remember { mutableStateOf("") }
    var isLoading by remember { mutableStateOf(false) }
    var hasError by remember { mutableStateOf(false) }

    // Filter contacts based on search query
    LaunchedEffect(searchQuery, contacts) {
        filteredContacts = if (searchQuery.isEmpty()) {
            contacts
        } else {
            contacts.filter { contact ->
                contact.name.contains(searchQuery, ignoreCase = true) ||
                        contact.phone.any { it?.contains(searchQuery, ignoreCase = true) == true }
            }
        }
    }

    AlertDialog(
        onDismissRequest = onDismiss,
        title = {
            Text("Select Contact")
        },
        text = {
            Column {
                // Search field
                OutlinedTextField(
                    value = searchQuery,
                    onValueChange = { searchQuery = it },
                    label = { Text("Search contacts") },
                    leadingIcon = {
                        Icon(
                            imageVector = Icons.Filled.Search,
                            contentDescription = "Search"
                        )
                    },
                    modifier = Modifier.fillMaxWidth(),
                    singleLine = true
                )

                Spacer(modifier = Modifier.height(8.dp))

                // Contact list
                Box(
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(400.dp)
                ) {
                    ContactPermissionHandler(
                        onPermissionGranted = {
                            ContactsLoader(
                                onContactsLoaded = { loadedContacts ->
                                    contacts = loadedContacts
                                },
                                showLoadingIndicator = false
                            )

                            when {
                                isLoading -> {
                                    Box(
                                        modifier = Modifier.fillMaxSize(),
                                        contentAlignment = Alignment.Center
                                    ) {
                                        Column(
                                            horizontalAlignment = Alignment.CenterHorizontally
                                        ) {
                                            CircularProgressIndicator()
                                            Spacer(modifier = Modifier.height(8.dp))
                                            Text("Loading contacts...")
                                        }
                                    }
                                }
                                hasError -> {
                                    Box(
                                        modifier = Modifier.fillMaxSize(),
                                        contentAlignment = Alignment.Center
                                    ) {
                                        Text(
                                            "Failed to load contacts",
                                            color = MaterialTheme.colorScheme.error
                                        )
                                    }
                                }
                                filteredContacts.isEmpty() && searchQuery.isNotEmpty() -> {
                                    Box(
                                        modifier = Modifier.fillMaxSize(),
                                        contentAlignment = Alignment.Center
                                    ) {
                                        Text("No contacts found matching \"$searchQuery\"")
                                    }
                                }
                                filteredContacts.isEmpty() -> {
                                    Box(
                                        modifier = Modifier.fillMaxSize(),
                                        contentAlignment = Alignment.Center
                                    ) {
                                        Text("Please wait fetching Contacts. Check if your device have contacts")
                                    }
                                }
                                else -> {
                                    LazyColumn(
                                        verticalArrangement = Arrangement.spacedBy(4.dp)
                                    ) {
                                        items(filteredContacts) { contact ->
                                            ContactListItem(
                                                contact = contact,
                                                onClick = { onContactSelected(contact) },
                                                searchQuery = searchQuery
                                            )
                                        }
                                    }
                                }
                            }
                        },
                        onPermissionDenied = {
                          /*  Box(
                                modifier = Modifier.fillMaxSize(),
                                contentAlignment = Alignment.Center
                            ) {
                                Column(
                                    horizontalAlignment = Alignment.CenterHorizontally
                                ) {
                                    Icon(
                                        imageVector = Icons.Filled.Phone,
                                        contentDescription = null,
                                        tint = MaterialTheme.colorScheme.error,
                                        modifier = Modifier.size(48.dp)
                                    )
                                    Spacer(modifier = Modifier.height(8.dp))
                                    Text(
                                        "Contact permission required",
                                        fontWeight = FontWeight.Bold
                                    )
                                    Text(
                                        "Grant permission to select contacts",
                                        style = MaterialTheme.typography.bodyMedium,
                                        color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.6f)
                                    )
                                }
                            }*/
                        }
                    )
                }
            }
        },
        confirmButton = {
            TextButton(onClick = onDismiss) {
                Text("Cancel")
            }
        }
    )
}

@Composable
fun ContactListItem(
    contact: Contact,
    onClick: () -> Unit,
    searchQuery: String = "",
    @SuppressLint("ModifierParameter") modifier: Modifier = Modifier
) {
    Card(
        modifier = modifier
            .fillMaxWidth()
            .clickable { onClick() },
        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)
    ) {
        Column(
            modifier = Modifier.padding(12.dp)
        ) {
            // Contact name with highlighting
            Text(
                text = if (searchQuery.isNotEmpty()) {
                    buildAnnotatedString {
                        val name = contact.name
                        val startIndex = name.indexOf(searchQuery, ignoreCase = true)
                        if (startIndex >= 0) {
                            append(name.substring(0, startIndex))
                            withStyle(
                                style = SpanStyle(
                                    background = MaterialTheme.colorScheme.primary.copy(alpha = 0.3f),
                                    fontWeight = FontWeight.Bold
                                )
                            ) {
                                append(name.substring(startIndex, startIndex + searchQuery.length))
                            }
                            append(name.substring(startIndex + searchQuery.length))
                        } else {
                            append(name)
                        }
                    }
                } else {
                    AnnotatedString(contact.name)
                },
                style = MaterialTheme.typography.bodyLarge,
                fontWeight = FontWeight.Medium
            )

            // Phone numbers
            if (contact.phone.isNotEmpty()) {
                Spacer(modifier = Modifier.height(4.dp))
                contact.phone.take(2).forEach { phoneNumber -> // Show max 2 numbers
                    phoneNumber?.let {
                        Text(
                            text = it,
                            style = MaterialTheme.typography.bodyMedium,
                            color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f)
                        )
                    }
                }
                if (contact.phone.size > 2) {
                    Text(
                        text = "+${contact.phone.size - 2} more",
                        style = MaterialTheme.typography.bodySmall,
                        color = MaterialTheme.colorScheme.primary
                    )
                }
            }
        }
    }
}



// Preview and usage example
@Preview(showBackground = true)
@Composable
fun ContactPickerFieldPreview() {
    MaterialTheme {
        Column(
            modifier = Modifier.padding(16.dp),
            verticalArrangement = Arrangement.spacedBy(16.dp)
        ) {
            ContactPickerField(
                label = "Contact Name",
                onContactSelected = { contact ->
                    // Handle the Contact object
                    println("Selected contact: ${contact.name}")
                    if (contact.phone.isNotEmpty()) {
                        println("Phone numbers: ${contact.phone}")
                    }
                }
            )

            Text("Usage Example:", style = MaterialTheme.typography.headlineSmall)
            Text("Type manually or click contacts icon to browse")
        }
    }
}


@SuppressLint("Range")
@Composable
fun ContactsLoader(
    onContactsLoaded: (List<Contact>) -> Unit,
    showLoadingIndicator: Boolean = true
) {
    val context = LocalContext.current
    val contentResolver: ContentResolver = context.contentResolver
    var isLoading by remember { mutableStateOf(false) }
    var hasError by remember { mutableStateOf(false) }

    LaunchedEffect(Unit) {
        isLoading = true
        hasError = false

        try {
            withContext(Dispatchers.IO) {
                val contacts = loadContactsFromDevice(contentResolver)

                withContext(Dispatchers.Main) {
                    onContactsLoaded(contacts)
                    isLoading = false
                }
            }
        } catch (e: Exception) {
            withContext(Dispatchers.Main) {
                hasError = true
                isLoading = false
                onContactsLoaded(emptyList())
            }
        }
    }

    // Show loading or error state
    if (showLoadingIndicator) {
        when {
            isLoading -> {
                Box(
                    modifier = Modifier.fillMaxWidth().padding(16.dp),
                    contentAlignment = Alignment.Center
                ) {
                    Row(verticalAlignment = Alignment.CenterVertically) {
                        CircularProgressIndicator(modifier = Modifier.size(24.dp))
                        Spacer(modifier = Modifier.width(8.dp))
                        Text("Loading contacts...")
                    }
                }
            }
            hasError -> {
                Box(
                    modifier = Modifier.fillMaxWidth().padding(16.dp),
                    contentAlignment = Alignment.Center
                ) {
                    Text(
                        "Failed to load contacts",
                        color = MaterialTheme.colorScheme.error
                    )
                }
            }
        }
    }
}

@SuppressLint("Range")
private fun loadContactsFromDevice(contentResolver: ContentResolver): List<Contact> {
    val contactsList = mutableListOf<Contact>()

    val projection = arrayOf(
        ContactsContract.Contacts._ID,
        ContactsContract.Contacts.DISPLAY_NAME_PRIMARY,
        ContactsContract.Contacts.HAS_PHONE_NUMBER
    )

    val cursor = contentResolver.query(
        ContactsContract.Contacts.CONTENT_URI,
        projection,
        null,
        null,
        ContactsContract.Contacts.DISPLAY_NAME_PRIMARY + " ASC"
    )

    cursor?.use {
        val idColumn = it.getColumnIndexOrThrow(ContactsContract.Contacts._ID)
        val nameColumn = it.getColumnIndexOrThrow(ContactsContract.Contacts.DISPLAY_NAME_PRIMARY)
        val hasPhoneNumberColumn = it.getColumnIndexOrThrow(ContactsContract.Contacts.HAS_PHONE_NUMBER)

        while (it.moveToNext()) {
            val contactId = it.getString(idColumn)
            val name = it.getString(nameColumn) ?: "Unknown"
            val hasPhoneNumber = it.getInt(hasPhoneNumberColumn) > 0

            val phoneNumbers = if (hasPhoneNumber) {
                getPhoneNumbers(contentResolver, contactId)
            } else {
                emptyList()
            }

            // Only add contacts that have phone numbers
            if (phoneNumbers.isNotEmpty()) {
                val contact = Contact(
                    id = "", // Your app's internal ID
                    name = name,
                    phone = phoneNumbers,
                    contactId = contactId
                )
                contactsList.add(contact)
            }
        }
    }

    return contactsList
}

@SuppressLint("Range")
private fun getPhoneNumbers(contentResolver: ContentResolver, contactId: String): List<String> {
    val phoneNumbers = mutableListOf<String>()

    val phoneProjection = arrayOf(ContactsContract.CommonDataKinds.Phone.NUMBER)
    val phoneCursor = contentResolver.query(
        ContactsContract.CommonDataKinds.Phone.CONTENT_URI,
        phoneProjection,
        ContactsContract.CommonDataKinds.Phone.CONTACT_ID + " = ?",
        arrayOf(contactId),
        null
    )

    phoneCursor?.use { cursor ->
        val numberColumn = cursor.getColumnIndexOrThrow(ContactsContract.CommonDataKinds.Phone.NUMBER)
        while (cursor.moveToNext()) {
            val phoneNumber = cursor.getString(numberColumn)?.trim()
            if (!phoneNumber.isNullOrEmpty()) {
                phoneNumbers.add(phoneNumber)
            }
        }
    }

    return phoneNumbers
}

private enum class PermissionState {
    GRANTED,
    DENIED_SHOW_RATIONALE,
    PERMANENTLY_DENIED,
    CHECKING
}
@Composable
fun ContactPermissionHandler(
    onPermissionGranted: @Composable () -> Unit,
    onPermissionDenied: @Composable () -> Unit = {
        PermissionDeniedUI()
    }
) {
    val context = LocalContext.current
    val activity = context as? androidx.activity.ComponentActivity
    var permissionState by remember { mutableStateOf<PermissionState?>(null) }
    var shouldShowRationale by remember { mutableStateOf(false) }

    val launcher = rememberLauncherForActivityResult(
        contract = ActivityResultContracts.RequestPermission()
    ) { isGranted ->
        if (isGranted) {
            permissionState = PermissionState.GRANTED
        } else {
            // Check if we should show rationale (permission can be requested again)
            // or if it's permanently denied
            shouldShowRationale = activity?.shouldShowRequestPermissionRationale(
                Manifest.permission.READ_CONTACTS
            ) ?: false

            permissionState = if (shouldShowRationale) {
                PermissionState.DENIED_SHOW_RATIONALE
            } else {
                PermissionState.PERMANENTLY_DENIED
            }
        }
    }

    LaunchedEffect(Unit) {
        val hasPermission = ContextCompat.checkSelfPermission(
            context,
            Manifest.permission.READ_CONTACTS
        ) == PackageManager.PERMISSION_GRANTED

        if (hasPermission) {
            permissionState = PermissionState.GRANTED
        } else {
            // Check rationale before first request
            shouldShowRationale = activity?.shouldShowRequestPermissionRationale(
                Manifest.permission.READ_CONTACTS
            ) ?: false

            permissionState = PermissionState.CHECKING
        }
    }

    when (permissionState) {
        PermissionState.GRANTED -> onPermissionGranted()
        PermissionState.DENIED_SHOW_RATIONALE -> {
            // User denied but can still be asked again
            PermissionDeniedUI(canRetry = true) {
                launcher.launch(Manifest.permission.READ_CONTACTS)
            }
        }
        PermissionState.PERMANENTLY_DENIED -> {
            // User denied permanently, can only go to settings
            PermissionDeniedUI(canRetry = false) {
                val intent = Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS).apply {
                    data = Uri.fromParts("package", context.packageName, null)
                }
                context.startActivity(intent)
            }
        }
        PermissionState.CHECKING -> {
            LaunchedEffect(permissionState) {
                launcher.launch(Manifest.permission.READ_CONTACTS)
            }
            Box(
                modifier = Modifier.fillMaxSize(),
                contentAlignment = Alignment.Center
            ) {
                CircularProgressIndicator()
            }
        }
        null -> {
            Box(
                modifier = Modifier.fillMaxSize(),
                contentAlignment = Alignment.Center
            ) {
                CircularProgressIndicator()
            }
        }
    }
}

@Composable
private fun PermissionDeniedUI(
    canRetry: Boolean = true,
    onRetryClick: () -> Unit = {}
) {
    val context = LocalContext.current

    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp),
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.Center
    ) {
        Icon(
            imageVector = Icons.Filled.Phone,
            contentDescription = null,
            tint = MaterialTheme.colorScheme.error,
            modifier = Modifier.size(64.dp)
        )

        Spacer(modifier = Modifier.height(16.dp))

        Text(
            text = "Contact Permission Required",
            style = MaterialTheme.typography.headlineSmall,
            fontWeight = FontWeight.Bold,
            textAlign = TextAlign.Center
        )

        Spacer(modifier = Modifier.height(8.dp))

        Text(
            text = if (canRetry) {
                "To select contacts from your device, we need access to your contacts. You can still enter names manually."
            } else {
                "Contact permission was permanently denied. Please enable it manually in settings to select contacts from your device."
            },
            style = MaterialTheme.typography.bodyMedium,
            textAlign = TextAlign.Center,
            color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f)
        )

        Spacer(modifier = Modifier.height(24.dp))

        Row(
            horizontalArrangement = Arrangement.spacedBy(12.dp)
        ) {
            // Settings button (always available)
            OutlinedButton(
                onClick = {
                    val intent = Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS).apply {
                        data = Uri.fromParts("package", context.packageName, null)
                    }
                    context.startActivity(intent)
                }
            ) {
                Icon(
                    imageVector = Icons.Filled.Settings,
                    contentDescription = null,
                    modifier = Modifier.size(18.dp)
                )
                Spacer(modifier = Modifier.width(8.dp))
                Text("Settings")
            }

            // Retry button (only if permission can be requested again)
            if (canRetry) {
                Button(
                    onClick = onRetryClick
                ) {
                    Icon(
                        imageVector = Icons.Filled.Refresh,
                        contentDescription = null,
                        modifier = Modifier.size(18.dp)
                    )
                    Spacer(modifier = Modifier.width(8.dp))
                    Text("Try Again")
                }
            }
        }

        Spacer(modifier = Modifier.height(16.dp))

        Text(
            text = "Note: You can still enter contact names manually without this permission.",
            style = MaterialTheme.typography.labelSmall,
            textAlign = TextAlign.Center,
            color = MaterialTheme.colorScheme.primary
        )
    }
}



@Composable
fun ContactItem(
    contact: Contact,
    onClick: ((Contact) -> Unit)? = null
) {
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .let { if (onClick != null) it.clickable { onClick(contact) } else it }
    ) {
        Column(
            modifier = Modifier.padding(16.dp)
        ) {
            Row(
                verticalAlignment = Alignment.CenterVertically
            ) {
                Icon(
                    imageVector = Icons.Default.Person,
                    contentDescription = null,
                    tint = MaterialTheme.colorScheme.primary
                )
                Spacer(modifier = Modifier.width(12.dp))
                Text(
                    text = contact.name,
                    style = MaterialTheme.typography.headlineSmall,
                    fontWeight = FontWeight.Medium
                )
            }

            if (contact.phone.isNotEmpty()) {
                Spacer(modifier = Modifier.height(8.dp))
                contact.phone.forEach { phoneNumber ->
                    Row(
                        verticalAlignment = Alignment.CenterVertically,
                        modifier = Modifier.padding(start = 36.dp)
                    ) {
                        Icon(
                            imageVector = Icons.Default.Phone,
                            contentDescription = null,
                            modifier = Modifier.size(16.dp),
                            tint = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.6f)
                        )
                        Spacer(modifier = Modifier.width(8.dp))
                        if (phoneNumber != null) {
                            Text(
                                text = phoneNumber,
                                style = MaterialTheme.typography.bodySmall,
                                color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.8f)
                            )
                        }
                    }
                }
            }
        }
    }
}

@Preview(showBackground = true)
@Composable
fun ContactItemPreview() {
    MaterialTheme {
        ContactItem(
            contact = Contact(
                id = "1",
                name = "John Doe",
                phone = listOf("+1234567890", "+0987654321"),
                contactId = "123"
            )
        )
    }
}